#+TITLE: Yet Another Color Forth (yacf)

This is a toy project aimed on exploration.

* Features
- stack based (forth...) :: system stack for control stack, other
     register stack index for data stack
- two heaps (or more) :: separate data heap and code heap
- compiles tagged ("coloured") words :: 32 bit words contain 3-bit tag
     and 29 bit name
- x86 as build host :: actually, x86 means Intel Atom™ processor.
- machine code with Linux as target :: the interface to target
     hardware are syscalls. No library expected nor used.
- no BASE :: numbers are explicitly decimal or hexadecimal, both on
             input (different color) and output (different words).
- no STATE :: green words mean we are compiling, yellow we are executing.
- tail call optimization :: if semicolon to be compiled follows
     compiled call to word, jump is compiled instead. This allow to
     delay for some time real definition of semicolon.
* [2/6] Immediate plans
- [X] Compile elf binary
- [X] Output buffer words
- [ ] Compile itself as a binary
- [ ] Compile arm binary
- [ ] Compile pic (Microchip) binary :: it was in place some time ago,
     but got lost.
- [ ] Make editor to edit blocks :: currently, conversion is done
     externally.
* Elf binary
|     VMA | Contains               |
|---------+------------------------|
| 0x20000 | Elf header             |
| 0x20054 | last dictionary VMA    |
| 0x20060 | addresses of tag words |
| 0x20080 | words code             |
|    init | init code              |
|         | dictionary             |
|     ... | ...                    |
|         | output buffer          |
| 0x30000 | random variables       |
|         | stack                  |
| 0x30100 | end                    |

- code starts at 0x20054 (after elf headers)
* x86 assembler low level words
Legend: ~o~ is signed octet, ~w~ is word

** Builder words
These are forth words that put te code
| forth         | x86               | usage           |
|---------------+-------------------+-----------------|
| ~,put~        | mov %eax, (%ebx)  | ~dup~ component |
| /n/ ~,+stack~ | lea n(%ebx), %ebx | ~nip~, ...      |


** Number macros
| forth       | x86 assembler                          |
|-------------+----------------------------------------|
| n +         | add n, %eax                            |
| w +l        | add w, %eax                            |
| o +@        | mov n(eax), %eax                       |
| w @-+       | sub w, %eax                            |
| w @         | <dup>; mov w, %eax                     |
| o ash       | sar o, %eax                            |
| o lsr       | shr o, %eax                            |
| o shl       | shl o, %eax                            |
| o and       | and o, %eax                            |
| w /         | xor %edx, %edx; mov $w, %esi; div %esi |
| w cmp       | cmp $w, %eax                           |
| <reg> reg!  | mov (%ebx), <reg>                      |
| <reg> ldreg | mov <reg>, %eax                        |
| <reg> pop   | pop <reg>                              |
| <reg> push  | push <reg>                             |


** Macros
| forth   | x86 assembler              |
|---------+----------------------------|
| ~;~     | ret                        |
| ~over+~ | add 4(%ebx), %eax          |
| ~/xor/~ | xor 4(%ebx), %eax          |
| ~!cl~   | mov %cl, (%eax)            |
| ~!ecx~  | mov %ecx, (%eax)           |
| ~break~ | int 0x3                    |
| ~@~     | mov (%eax), %eax           |
| ~-~     | neg %eax                   |
| ~1-~    | dec %eax                   |
| ~/reg/~ | lea 0(%ebp, %eax, 4), %eax |
| ~/sys/~ | mov 0xc(%ebx), %edx        |
|         | mov 0x8(%ebx), %ecx        |
|         | mov 0x4(%ebx), %ebx        |
|         | int 0x80                   |
| ~da@+~  | mov (%edi), %eax           |
|         | lea 4(%edi), %edi          |
| ~a!~    | mov %eax, %edi  ; ~drop~   |
|         |                            |

Note: ~/reg/~ could be possibly even better defined as an number
macro. However, it would need to change the stack size.

* Code pages index

** Core
| pg | content                     |
|----+-----------------------------|
| 00 | auxiliary words             |
| 02 | x86 number macros           |
| 04 | x86 macros                  |
| 06 | 〃                          |
| 08 | simplest words  (~dup~ ...) |
| 0a | A register, sys/3           |
| 0c | load program code           |
|----+-----------------------------|
** Conditionals
| 0e | conditionals |

** Numbers
| pg | content         |
|----+-----------------|
| 10 | number printing |
| 12 | word printing   |

** Applications
| 32 | x86 compiler  |
| 36 | Viewer/editor |

